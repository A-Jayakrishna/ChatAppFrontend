{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ajaik\\\\Desktop\\\\phase2\\\\communication\\\\ChatApp\\\\FrontEndReactFiles\\\\src\\\\components\\\\ChatMsgBox.js\";\nimport React, { Component } from 'react';\nimport '../css/ChatMsgBox.css';\nimport Msg from './Msg';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ChatMsgBox extends Component {\n  constructor(props) {\n    super(props);\n\n    this.disconnect = () => {\n      this.socketRef.close();\n    };\n\n    this.updateMsgs = msg => {\n      this.sendMessage(msg);\n    };\n\n    this.socketRef = null;\n    this.state = {\n      msgs: []\n    };\n  }\n\n  connect(url) {\n    this.socketRef = new WebSocket(`ws://localhost:8000/ws/chat/${url}/`); // this.socketRef.onopen = () => {\n    //     console.log(\"Connection established..\");\n    // };\n\n    this.socketRef.onmessage = e => {\n      this.socketNewMessage(e.data);\n    };\n\n    this.socketRef.onerror = e => {\n      console.log(e.message);\n    }; // this.socketRef.onclose = () => {\n    //     console.log(\"WebSocket closed\");\n    // };\n\n  }\n\n  socketNewMessage(data) {\n    const parsedData = JSON.parse(data);\n    this.setState({\n      msgs: [...this.state.msgs, parsedData]\n    });\n  }\n\n  sendMessage(data) {\n    try {\n      this.socketRef.send(JSON.stringify({\n        'msg': [this.props.userId, data]\n      }));\n    } catch (err) {\n      console.log(err.message);\n    }\n  }\n\n  state() {\n    return this.socketRef.readyState;\n  }\n\n  componentDidMount() {\n    let path = null;\n\n    if (this.props.id === \"Grp\") {\n      path = \"grp\";\n    } else {\n      let arr = [this.props.id, this.props.userId];\n      arr.sort(function (a, b) {\n        return a - b;\n      });\n      path = arr.join(\"_\");\n    }\n\n    axios.get(`http://localhost:8000/chat/msg/${path}`).then(res => {\n      this.setState({\n        msgs: res.data\n      }, this.connect(path));\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ChatMsgBox\",\n      id: \"ChatBox\",\n      children: this.state.msgs.map((e, ind) => {\n        if (e.sender === undefined) {\n          let date = new Date();\n          date = \"\" + date.getHours() + \":\" + date.getMinutes();\n\n          if (this.props.userId === e.msg[0]) {\n            return /*#__PURE__*/_jsxDEV(Msg, {\n              typ: \"userMsg\",\n              msg: e.msg[1],\n              time: date\n            }, ind, false, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 37\n            }, this);\n          } else {\n            return /*#__PURE__*/_jsxDEV(Msg, {\n              typ: \"clientMsg\",\n              msg: e.msg[1],\n              time: date\n            }, ind, false, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 37\n            }, this);\n          }\n        } else {\n          let date = new Date(e.time);\n          date = \"\" + date.getHours() + \":\" + date.getMinutes();\n\n          if (this.props.userId === e.sender) {\n            return /*#__PURE__*/_jsxDEV(Msg, {\n              typ: \"userMsg\",\n              msg: e.msg,\n              time: date\n            }, ind, false, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 37\n            }, this);\n          } else {\n            return /*#__PURE__*/_jsxDEV(Msg, {\n              typ: \"clientMsg\",\n              msg: e.msg,\n              time: date\n            }, ind, false, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 37\n            }, this);\n          }\n        }\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default ChatMsgBox; // < Msg typ = 'userMsg' msg = 'hi' />\n//     <Msg typ='clientMsg' msg='hello' />","map":{"version":3,"sources":["C:/Users/ajaik/Desktop/phase2/communication/ChatApp/FrontEndReactFiles/src/components/ChatMsgBox.js"],"names":["React","Component","Msg","axios","ChatMsgBox","constructor","props","disconnect","socketRef","close","updateMsgs","msg","sendMessage","state","msgs","connect","url","WebSocket","onmessage","e","socketNewMessage","data","onerror","console","log","message","parsedData","JSON","parse","setState","send","stringify","userId","err","readyState","componentDidMount","path","id","arr","sort","a","b","join","get","then","res","render","map","ind","sender","undefined","date","Date","getHours","getMinutes","time"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport '../css/ChatMsgBox.css'\r\nimport Msg from './Msg'\r\nimport axios from 'axios'\r\n\r\nclass ChatMsgBox extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.socketRef = null;\r\n        this.state = {\r\n            msgs: [],\r\n        }\r\n    }\r\n\r\n    connect(url) {\r\n        this.socketRef = new WebSocket(`ws://localhost:8000/ws/chat/${url}/`);\r\n        // this.socketRef.onopen = () => {\r\n        //     console.log(\"Connection established..\");\r\n        // };\r\n        this.socketRef.onmessage = e => {\r\n            this.socketNewMessage(e.data);\r\n        };\r\n        this.socketRef.onerror = e => {\r\n            console.log(e.message);\r\n        };\r\n        // this.socketRef.onclose = () => {\r\n        //     console.log(\"WebSocket closed\");\r\n        // };\r\n    }\r\n\r\n    disconnect=()=> {\r\n        this.socketRef.close();\r\n    }\r\n\r\n    socketNewMessage(data) {\r\n        const parsedData = JSON.parse(data);\r\n        this.setState({ msgs: [...this.state.msgs, parsedData] });\r\n    }\r\n\r\n    sendMessage(data) {\r\n        try {\r\n            this.socketRef.send(JSON.stringify({ 'msg': [this.props.userId, data]}));\r\n        } catch (err) {\r\n            console.log(err.message);\r\n        }\r\n    }\r\n\r\n    state() {\r\n        return this.socketRef.readyState;\r\n    }\r\n\r\n    updateMsgs = (msg) => {\r\n        this.sendMessage(msg);\r\n    }\r\n\r\n    componentDidMount(){\r\n        let path=null;\r\n        if (this.props.id===\"Grp\"){\r\n            path=\"grp\"\r\n        }else{\r\n            let arr = [this.props.id, this.props.userId]\r\n            arr.sort(function (a, b) { return a - b })\r\n            path=arr.join(\"_\")\r\n        }\r\n        axios.get(`http://localhost:8000/chat/msg/${path}`)\r\n        .then(res=>{\r\n            this.setState({ msgs: res.data },this.connect(path))\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"ChatMsgBox\" id=\"ChatBox\">\r\n                {this.state.msgs.map((e,ind)=>{\r\n                    if (e.sender === undefined) {\r\n                        let date = new Date()\r\n                        date = \"\" + date.getHours() + \":\" + date.getMinutes()\r\n                        if (this.props.userId === e.msg[0]) {\r\n                            return (<Msg key={ind} typ='userMsg' msg={e.msg[1]} time={date} />)\r\n                        } else {\r\n                            return (<Msg key={ind} typ='clientMsg' msg={e.msg[1]} time={date} />)\r\n                        }\r\n                    } else {\r\n                        let date = new Date(e.time)\r\n                        date = \"\" + date.getHours() + \":\" + date.getMinutes()\r\n                        if (this.props.userId === e.sender) {\r\n                            return (<Msg key={ind} typ='userMsg' msg={e.msg} time={date} />)\r\n                        } else {\r\n                            return (<Msg key={ind} typ='clientMsg' msg={e.msg} time={date} />)\r\n                        }\r\n                    }\r\n                })}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ChatMsgBox\r\n\r\n    // < Msg typ = 'userMsg' msg = 'hi' />\r\n    //     <Msg typ='clientMsg' msg='hello' />"]},"metadata":{},"sourceType":"module"}